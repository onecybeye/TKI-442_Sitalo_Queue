#pragma once
#include <stdexcept>
#include <ostream>

/**
 * @brief Пространство имён для обычной очереди.
 *
 * Содержит реализацию класса Queue для базовых операций с очередью.
 */
namespace queue {

    /**
     * @brief Класс Очередь.
     *
     * Реализует базовые операции с очередью (FIFO): добавление элемента,
     * удаление элемента, получение первого элемента и проверка на пустоту.
     */
    class Queue {
    private:
        int* data;             ///< Динамический массив для хранения элементов очереди.
        int capacity;          ///< Максимальная вместимость массива (размер буфера).
        int frontIndex;        ///< Индекс первого элемента в очереди.
        int rearIndex;         ///< Индекс последнего элемента в очереди.
        int size;              ///< Текущий размер очереди.

        /**
         * @brief Увеличивает размер массива при необходимости.
         *
         * Создаёт новый массив увеличенного размера и копирует в него данные из старого.
         * @param newCapacity Новый размер буфера (вместимость).
         */
        void resize(int newCapacity);

    public:
        /**
         * @brief Конструктор очереди.
         *
         * Инициализирует очередь с заданным начальным размером.
         * @param initialCapacity Начальный размер буфера (по умолчанию 10).
         */
        Queue(int initialCapacity = 10);

        /**
         * @brief Деструктор очереди.
         *
         * Освобождает память, выделенную для хранения элементов.
         */
        ~Queue();

        /**
         * @brief Добавляет элемент в конец очереди.
         *
         * Если буфер заполнен, происходит увеличение размера массива (resize).
         * @param value Значение элемента для добавления.
         */
        void enqueue(int value);

        /**
         * @brief Удаляет и возвращает элемент из начала очереди.
         *
         * @return Значение удалённого элемента.
         * @throws std::runtime_error Если очередь пуста.
         */
        int dequeue();

        /**
         * @brief Возвращает элемент из начала очереди без его удаления.
         *
         * @return Значение первого элемента в очереди.
         * @throws std::runtime_error Если очередь пуста.
         */
        int front() const;

        /**
         * @brief Проверяет, пуста ли очередь.
         *
         * @return true, если очередь пуста, иначе false.
         */
        bool isEmpty() const;

        /**
         * @brief Возвращает текущий размер очереди.
         *
         * @return Количество элементов в очереди.
         */
        int getSize() const;

        /**
         * @brief Перегрузка оператора вывода << для очереди.
         *
         * Выводит все элементы очереди в поток.
         * @param os Поток вывода (например, std::cout).
         * @param q Очередь для вывода.
         * @return Ссылка на поток вывода.
         */
        friend std::ostream& operator<<(std::ostream& os, const Queue& q);
    };

} // namespace queue
